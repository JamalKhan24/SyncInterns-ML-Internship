# -*- coding: utf-8 -*-
"""Task_2_Real_Time_Face_Mask_Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16lPBbaWKJZIc9EykJyz1n7M0YUmq4av2

# **Task - 02**
# **Real-Time Face Mask Detection**

---

## Importing the libraries
"""

import numpy as np
import cv2
import datetime
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.preprocessing import image

"""## Building the Convolutional Neural Network (CNN)"""

model = Sequential()

model.add(Conv2D(32, (3,3), activation = 'relu', input_shape = (150,150,3)))
model.add(MaxPooling2D())

model.add(Conv2D(32, (3,3), activation = 'relu'))
model.add(MaxPooling2D())

model.add(Conv2D(32, (3, 3) , activation = 'relu'))
model.add(MaxPooling2D())

model.add(Flatten())

model.add(Dense(100, activation = 'relu'))
model.add(Dense(1, activation = 'sigmoid'))

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""## Importing the dataset"""

# from google.colab import drive
# drive.mount('/content/drive/')

"""### Augmenting the image dataset to generate new data"""

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory(
#        '/content/drive/MyDrive/Task2/train/', # for Google Drive
        'train', # for IDEs (Spyder, Pycharm, etc)
        target_size = (150,150),
        batch_size = 32,
        class_mode ='binary')

test_set = test_datagen.flow_from_directory(
#        '/content/drive/MyDrive/Task2/test', # for Google Drive
        'test', # for IDEs (Spyder, Pycharm, etc)
        target_size = (150,150),
        batch_size = 32,
        class_mode = 'binary')

model_saved = model.fit(
        training_set,
        epochs = 10,
        validation_data = test_set)

model.save('myModel.h5', model_saved)

"""## Implementing the Real-Time Detection"""

my_Model = load_model('myModel.h5')

cap = cv2.VideoCapture(0)
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

while cap.isOpened():
    _ , img = cap.read()
    face = face_cascade.detectMultiScale(img, scaleFactor = 1.1, minNeighbors = 4)
    for(x, y, w, h) in face:
        face_img = img[y:y+h, x:x+w]
        cv2.imwrite('temp.jpg', face_img)
        test_image = image.load_img('temp.jpg', target_size = (150, 150, 3))
        test_image = image.img_to_array(test_image)
        test_image = np.expand_dims(test_image, axis = 0)
        pred = my_Model.predict(test_image)[0][0]
        if pred == 1:
            cv2.rectangle(img, (x, y), (x+w, y+h), (0, 0, 255), 3)
            cv2.putText(img, 'NO MASK', ((x + w) // 2, y + h + 20), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
        else:
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3)
            cv2.putText(img, 'MASK', ((x + w) // 2 , y + h + 20),cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 3)
        dt = str(datetime.datetime.now())
        cv2.putText(img, dt, (400, 450), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

    cv2.imshow('LIVE', img)

    if cv2.waitKey(1) == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
